name: 'Build & Push to ECR'

on:
  workflow_call:
    inputs:
      default-agent:
        required: true
        type: string
        default: self-hosted
      dockerfile:
        required: true
        type: string
        default: Dockerfile
      aws-region:
        required: true
        type: string
      role-to-assume:
        required: true
        type: string
      role-duration-seconds:
        required: true
        type: number
        default: 1200
      role-session-name:
        required: true
        type: string
        default: "github-actions"
      push-image:
        required: true
        type: boolean
        default: false
      image-name:
        required: true
        type: string
      image-tag:
        required: true
        type: string
    secrets:
      aws-access-key-id:
        required: true
      aws-secret-access-key:
        required: true
    outputs:
      image-tag:
        description: "image tag"
        value: ${{ jobs.build.outputs.image-name }}
  
jobs:
  build:
    runs-on: ${{ inputs.default-agent }}
    outputs:
      image-name: ${{ steps.push.outputs.image-name }}
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: ${{ inputs.aws-region }}
          role-to-assume: ${{ inputs.role-to-assume }}
          role-duration-seconds: ${{ inputs.role-duration-seconds }}
          role-session-name: ${{ inputs.role-duration-seconds }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Checkout
        uses: actions/checkout@v3

      - name: Build Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t $ECR_REGISTRY/${{ inputs.image-name }}:${{ inputs.image-tag }} --build-arg COMMIT_HASH=${{ inputs.image-tag }} .

      - name: Push Image
        if: ${{ inputs.push-image == true }}
        id: push
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker push $ECR_REGISTRY/${{ inputs.image-name }}:${{ inputs.image-tag }}
          echo "image-name=$ECR_REGISTRY/${{ inputs.image-name }}:${{ inputs.image-tag }}" >> $GITHUB_OUTPUT
